<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MyBatisPlus.EmployeeMapperPlus">

    <!--自定义某个javaBean的封装规则
        type：自定义规则的java类型
        id:唯一id方便使用-->
    <resultMap id="MyEmp" type="MyBatisPlus.EmployeePlus">
    <!--指定主键列的封装规则
        id定义主键会有优化
         column：指定哪一列
         property：指定对应的javaBean属性-->
        <id column="id" property="id"></id>
        <!--定义普通列的封装规则-->
        <result column="last_name" property="last_name"></result>
        <!--其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上-->
        <result column="gender" property="gender"></result>
        <result column="email" property="email"></result>
    </resultMap>

<!--    <select id="getEmpById" resultType="MyBatisPlus.EmployeePlus">-->
<!--        select * from  employee where id = #{id}-->
<!--    </select>-->
<!-- resultType和resultMap只能二选一-->
    <select id="getEmpById" resultMap="MyEmp">
        select * from  employee where id = #{id}
    </select>



<!--
    联合查询：使用级联属性进行封装结果集
    -->
    <resultMap id="MyDifMap" type="MyBatisPlus.EmployeePlus">
        <id column="id" property="id"></id>
        <!--定义普通列的封装规则-->
        <result column="last_name" property="last_name"></result>
        <!--其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上-->
        <result column="gender" property="gender"></result>
        <result column="email" property="email"></result>
        <result column="d_id" property="dept.id"></result>
        <result column="dept_name" property="dept.deptName"></result>

    </resultMap>



    <resultMap id="MyDifMap2" type="MyBatisPlus.EmployeePlus">
        <id column="id" property="id"></id>
        <!--定义普通列的封装规则-->
        <result column="last_name" property="last_name"></result>
        <!--其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上-->
        <result column="gender" property="gender"></result>
        <result column="email" property="email"></result>
        <!--association可以指定联合的javaBean对象
        property="dept":指定那个属性是联合的对象
        javaType="MyBatisPlus.Department" 指定这个属性对象的类型【不能省略】-->
        <association property="dept" javaType="MyBatisPlus.Department">
            <id column="d_id" property="id"></id>
            <result column="dept_name" property="deptName"></result>
        </association>

    </resultMap>
<!--
    场景一：
        查询Employee的同时查询员工对应的部门
        Employee === Department
        一个员工有与之对应的部门信息：
        id last_name gender d_id did dept_name
-->
    <select id="getEmpAndDept" resultMap="MyDifMap2">
        select e.id id,e.last_name last_name,e.gender gender,e.email email, e.d_id d_id,d.id did,d.dept_name dept_name
         from employee e,department d where e.d_id=d.id AND e.id=#{id}
    </select>

    <!--使用association进行分布查询
    1、先按照员工id查询员工信息
    2、根据查询员工信息中的d_id 值去部门中查出部门信息
    3部门设置到员工中-->
    <resultMap id="MyEmpByStep" type="MyBatisPlus.EmployeePlus">
        <id column="id" property="id"></id>
        <result column="last_name" property="last_name"></result>
        <result column="gender" property="gender"></result>
        <result column="email" property="email"></result>
<!-- association 定义关联对象的封装规则
    select：表明当前的属性是调用select 指定的方法查出的结果
    column：指定哪一列的值传给这个方法
    流程：使用select指定的方法(传入column指定的这列参数的值)查出对象，并封装给property指定的属性-->
        <association property="dept"
                     select="MyBatisPlus.DepartmentMapper.getDeptById"
                    column="d_id">
        </association>
    </resultMap>


    <select id="getEmpByIdStep" resultMap="MyEmpByStep">
        select * from employee where id =#{id}
    </select>
</mapper>